#**************************************************************************
#																		  *
#	PROJECT		: MIPS port	for	UCOS-II									  *
#																		  *
#	MODULE		: MakeFile												  *
#																		  *
#	AUTHOR		: wuyueqian										                    *
#																		  *
#	PROCESSOR	: MIPS 4KEc	(32	bit	RISC) -	Actions	board				  *
#																		  *
#	Tool-chain	:  Cygnus											 *
#																		  *
#	DESCRIPTION	:														  *
#	Makefile used for building application.								  *
#																		  *
#	The	default	target (all) builds	application	in two formats :		  *
#	*.elf :	Image in ELF format.										  *
#	*.rec :	Image in S-record format.									  *
#																		  *
#	The	linker also	generates a	MAP	file "*.map".						  *
#																		  *
#	Other targets are :													  *
#	clean :	   Deletes all files generated by makefile.					  *
#	depend :   Builds dependency file.									  *
#																		  *
#*************************************************************************/
# **********************************************
# Type of Processor	& Board
# **********************************************
Processor =	mips
# **********************************************
# Directories
# **********************************************
#以makefile文件的存放目录为起始点，指定代码管理的根目录的相对路径 uvob
#同时为了方便，可以指定其他目录，引用一个变量的格式为 $(变量名称)
PSPRELROOT = ./../..
PSPLIBDIR  = $(PSPRELROOT)/lib
# **********************************************
# Name of application 开发人员需修改处(1)
IMAGENAME = hal
#所要编译的源文件的存放位置,开发人员需修改处(2)
SRCDIR_16 = ./ ./share_code
SRCDIR_32 =
#目标文件送往的文件夹路径,开发人员需修改处(3)
OBJECT_BIN_PATH = $(PSPRELROOT)/bin
# **********************************************


#工具名称
DRV_BUILDER = $(PSPRELROOT)/tools/drv_builder.exe
AP_BUILDER = $(PSPRELROOT)/tools/ap_builder.exe
#存放结果文件的目录，这里的设置为当前目录，即生成的结果文件放在当前目录
LINKDIR	  =	.

#存放所有.o文件的目录
OBJ_DIR  = ./obj
AR_DIR   = ./ar
#存放IMAGENAME相关的文件的目录
OUTPUT_DIR   =./output

#指定依赖过程的文件的搜索路径，把源文件的路径写上即可
VPATH	=	$(SRCDIR_16) $(SRCDIR_32) $(OBJ_DIR) $(AR_DIR)

# **********************************************
# Image	file names and map file
# **********************************************
#指定结果文件的名称
IMAGE_ELF  =	$(OUTPUT_DIR)/$(IMAGENAME).exe
IMAGE_LST  =	$(OUTPUT_DIR)/$(IMAGENAME).lst
IMAGE_REC  =	$(OUTPUT_DIR)/$(IMAGENAME).rec
IMAGE_BIN  =	$(OUTPUT_DIR)/$(IMAGENAME).sys
IMAGE_INFO = 	$(OUTPUT_DIR)/$(IMAGENAME).info
MAP	   =	$(OUTPUT_DIR)/$(IMAGENAME).map
TARGET_DRV =    $(OUTPUT_DIR)/$(IMAGENAME).drv
TARGET_EXT   = exe lst map ap info
TARGET_FILES = $(foreach n,$(TARGET_EXT),$(IMAGENAME).$(n))
# **********************************************
# Compiler and linker options
# **********************************************

#指定程序中引用的头文件的搜索路径，一般源码include时只写上头文件的名称，没有路径信息。这时就根据这个选项去搜索该头文件
INCLUDE	  =	 -I$(PSPRELROOT)/include/ucos -I$(PSPRELROOT)/include/drv -I$(PSPRELROOT)/include -I$(PSPRELROOT)/include/psp_inc -I$(PSPRELROOT)/include/hal_inc -I$(PSPRELROOT)/include/alsp

#指定链接时搜索的路径
LINCLUDE = -L$(PSPLIBDIR) -L$(PSPRELROOT)/include

#把公共定义makefile加载进来
include	$(PSPRELROOT)/cfg_rel/rules.mk

#指定自定义链接脚本的名称
LD_SCRIPT = hal_linker.xn

#链接命令行选项
LD_OPTS = -G0 -gc-section $(LINCLUDE) -T $(LD_SCRIPT) -o $(IMAGE_ELF) -Map $(MAP) $(OFORMAT)
#CC_OPTS_O0 += -mlong-calls

#指定打包归档文件的路径
SARINCLUDE = $(OBJ_DIR)/*.o

# **********************************************
# Files	to be compiled
# **********************************************

#获得.c后缀源码
SRC_C_16  = $(foreach dir,	$(SRCDIR_16), $(wildcard $(dir)/*.c))
#转换为.o格式文件名称，不带路径信息
OBJ_C_16  = $(notdir $(patsubst %.c, %.o, $(SRC_C_16)))

#获得.c后缀源码
SRC_C_32  = $(foreach dir,	$(SRCDIR_32), $(wildcard $(dir)/*.c))
#转换为.o格式文件名称，不带路径信息
OBJ_C_32  = $(notdir $(patsubst %.c, %.o, $(SRC_C_32)))

#获得.S后缀源码
SRC_S_16  = $(foreach dir,	$(SRCDIR_16), $(wildcard $(dir)/*.S))
#转换为.o格式文件名称，不带路径信息
OBJ_S_16  = $(notdir $(patsubst %.S, %.o, $(SRC_S_16)))

#获得.S后缀源码
SRC_S_32  = $(foreach dir,	$(SRCDIR_32), $(wildcard $(dir)/*.S))
#转换为.o格式文件名称，不带路径信息
OBJ_S_32  = $(notdir $(patsubst %.S, %.o, $(SRC_S_32)))

#获得所有的.o文件名称
OBJ = $(OBJ_C_16) $(OBJ_S_16) $(OBJ_C_32) $(OBJ_S_32)


# **********************************************
# Rules
# **********************************************
#make目标
.PHONY : all

#dump出lst文件
all : creat_dir $(IMAGE_ELF)
#	$(OBJDUMP) -D $(IMAGE_ELF) > $(IMAGE_LST)
	$(READELF) -a $(IMAGE_ELF) > $(IMAGE_INFO)
	$(DRV_BUILDER) $(IMAGE_ELF) $(TARGET_DRV)
	cp $(TARGET_DRV) $(OBJECT_BIN_PATH)

#创建临时文件夹
creat_dir:
	mkdir -p $(OBJ_DIR)
	mkdir -p $(AR_DIR)
	mkdir -p $(OUTPUT_DIR)

#链接过程
$(IMAGE_ELF) : $(OBJ) $(PSPLIBDIR)/card_hardware.a $(PSPLIBDIR)/usb_hardware.a $(PSPLIBDIR)/uhost_hardware.a $(PSPLIBDIR)/hal.a
	$(AR) -x $(PSPLIBDIR)/hal.a
	chmod 777 *.o
	cp *.o $(AR_DIR)
	rm -f *.o
	rm -f version.txt
	$(LD) $(SARINCLUDE) $(LD_OPTS)
	rm -f $(AR_DIR)/*.o
	rm -rf $(AR_DIR)

#编译过程
$(OBJ_C_16) : %.o : %.c
	$(CC) $(CC_OPTS_Os_16) -o	$(OBJ_DIR)/$@ $<
	@echo

$(OBJ_S_16) : %.o : %.S
	$(CC) $(CC_OPTS_O2_A_16) -o $(OBJ_DIR)/$@ $<
	@echo

$(OBJ_C_32) : %.o : %.c
	$(CC) $(CC_OPTS_O2) -o	$(OBJ_DIR)/$@ $<
	@echo

$(OBJ_S_32) : %.o : %.S
	$(CC) $(CC_OPTS_O2_A) -o $(OBJ_DIR)/$@ $<
	@echo




#删除结果文件
.PHONY : clean

clean :
	rm -f $(LINKDIR)/$(OBJ)
	rm -f $(LINKDIR)/$(TARGET_FILES)
	rm -rf $(OBJ_DIR)
	rm -rf $(OUTPUT_DIR)
	rm -f $(AR_DIR)/*.o
	rm -rf $(AR_DIR)
	rm -f *.o
	rm -f version.txt
