/**************************************************************************
*                                                                         *
*   PROJECT     : MIPS port for UCOS-II                                   *
*                                                                         *
*   MODULE      : bank a&b link.xn                                        *
*                                                                         *
*   AUTHOR      : wuyueqian                                               *
*                                                                         *
*   PROCESSOR   : MIPS 4KEc (32 bit RISC) - Actions board                 *
*                                                                         *
*   Tool-chain  : Cygnus                                                  *
*                                                                         *
*                                                                         *
*   Linker script file                                                    *
*                                                                         *
**************************************************************************/

/*定义GROUP BANK INDEX 和其他地址变量*/
INPUT(link_base.xn)

/*ap 代码和数据段链接地址*/
RCODE_TEXT_ADDR = MMM_MUSCIPLAY_VA_START;
RDATA_DATA_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_MMM_DATA_ADDR;
SRAM_TEXT_ADDR = RCODE_ADDR_BASE + 0x0; /*暂时不需要sram_tex段，需要时先在link_base.xn分配段空间*/

RDATA_PEQ_LRCH_BUFFER_ADDR = RDATA_ADDR_BASE + SRAM_PEQ_LRCH_BUFFER_SPEECH_ADDR;
RDATA_BSS2_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_MMM_BSS2_ADDR;

DATA_SIZE_RESERVE_4BYTES = SRAM_SPEECH_PLAYER_MMM_DATA_SIZE -4;

RDATA_RESAMPLE_BUFF_ADDR = RCODE_ADDR_BASE + SRAM_SPEECH_RESAMPLE_BUFF_ADDR;

RDATA_ENCODE_OUT_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_MMM_ENCODE_OUT_ADDR;
RDATA_WRITE_FILE_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_MMM_WRITE_FILE_STACK_BOTTOM;
RDATA_ENCODE_SOURCE_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_MMM_ENCODE_SOURCE_ADDR;

RDATA_ECHO_BUF0_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_ECHO_BUF0_ADDR;
RDATA_ECHO_BUF1_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_ECHO_BUF1_ADDR;
RDATA_FREQ_SHIFT_BUF_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_FREQ_SHIFT_BUF_ADDR;

RDATA_OK_MIC_TEMP_BUF_ADDR = RDATA_ADDR_BASE + SRAM_SPEECH_PLAYER_MIC_TEMP_BUF_ADDR;

RDATA_KEYTONE_INOUT_BUFF_ADDR = RDATA_ADDR_BASE + SRAM_KEYTONE_INPUT_BUFFER_ADDR;

OUTPUT_ARCH(mips)

ENTRY(mmm_sp_cmd)

SECTIONS
{
    /*常驻代码*/
    .sram_text SRAM_TEXT_ADDR	:
    {
    	. = 0x0; /*暂时不需要sram_tex段，需要时先在link_base.xn分配段空间*/
    }

    .entry RCODE_TEXT_ADDR :
    {
    	*/obj/speech_player_cmd.o(.rodata.entry)
    }
    .text   : 
    {
    	*/obj/*.o(.text .rodata*)
    	al_mix.o(.text .rodata*)
    }

    .BSS_PEQ_LRCH_BUFFER RDATA_PEQ_LRCH_BUFFER_ADDR	:
    {
    	*/obj/speech_player_post_process_audiopp.o(.bss.audiopp_lrch_buffer)
    	*/obj/speech_player_post_process_audiopp.o(.bss.audiopp_mic_lrch_buffer)
    }

	.BSS2_BUFFER RDATA_BSS2_ADDR	:
	{
    	*/obj/*.o(.bss.mic_adc_buf)
    	*/obj/*.o(.bss.mic_input_buf)
    	*/obj/*.o(.bss.peq_temp_buf)
    	*/obj/*.o(.bss.predeal_buf)
    	*/obj/*.o(.bss.temp_buf)
    	*/obj/*.o(.bss.sp_post_temp_buf)
    	*/obj/*.o(.bss.sp_pre_temp_buf)
    }

    /* 重采样BUFF */
    .BSS_RESAMPLE_BUFF RDATA_RESAMPLE_BUFF_ADDR :
    {
        */obj/speech_player_resample_process.o(.bss.RESAMPLE_TEMP_BUFF)
        */obj/speech_player_resample_process.o(.bss.RESAMPLE_TABLE_BUFF)
        */obj/speech_player_resample_process.o(.bss.RESAMPLE_INPUT_BUFFER)
        */obj/speech_player_resample_process.o(.bss.RESAMPLE_OUTPUT_BUFFER)
        . = SRAM_SPEECH_RESAMPLE_BUFF_SIZE;
    }

    /* 软按键音BUFF */
    .BSS_KEYTONE_BUFF RDATA_KEYTONE_INOUT_BUFF_ADDR	:
    {
    	*/obj/speech_player_ktp.o(.bss.keytone_input_buf)
    	*/obj/speech_player_ktp.o(.bss.keytone_output_buf)
    }

    .BSS_ENCODE_OUT_BUF RDATA_ENCODE_OUT_ADDR	:
    {
        */obj/speech_player_record.o(.bss.encode_out_buffer)
    }

    .BSS_ENCODE_SOURCE_BUF RDATA_ENCODE_SOURCE_ADDR	:
    {
        */obj/speech_player_record.o(.bss.enc_source_buffer)
    }

    .BSS_ECHO_BUF0 RDATA_ECHO_BUF0_ADDR	:
    {
    	*/obj/speech_player_post_process_audiopp.o(.bss.echo_buf0)
    }
    .BSS_ECHO_BUF1 RDATA_ECHO_BUF1_ADDR	:
    {
    	*/obj/speech_player_post_process_audiopp.o(.bss.echo_buf1)
    }
    .BSS_FREQ_SHIFT_BUF RDATA_FREQ_SHIFT_BUF_ADDR	:
    {
    	*/obj/speech_player_post_process_audiopp.o(.bss.freq_shift_buf)
    }
	.BSS_MIC_TEMP_BUF RDATA_OK_MIC_TEMP_BUF_ADDR	:
    {
    	*/obj/speech_player_cmd.o(.bss.mic_temp_buf)
    }

    /* 初始化了的全局数据段*/
    .data RDATA_DATA_ADDR   :  
    {
        _rd_data_start = ABSOLUTE(.); /*NOTE!!不能去掉这一行，否则如果.data段为空，可能会导致.bss段连接地址错误*/
        */obj/*.o(.data)
    }
    .bss :
    {
    	*/obj/*.o(.bss COMMON)
    	
    	*/obj/*.o(.bss.pre_process_buf)
    	*/obj/*.o(.bss.ktd_input_buf)
    	. = DATA_SIZE_RESERVE_4BYTES - AP_BACK_HIGH_BT_CALL_STK_SIZE - SIZEOF(.data);
    }

    .bss.ap_high_bt_call_stack_ptos  AP_BACK_HIGH_BT_CALL_STK_POS :
    {
        */obj/speech_player_start.o(.stack.ap_high_bt_call_stack_ptos)
        . = AP_BACK_HIGH_BT_CALL_STK_SIZE;
    }
    _BT_CALL_STK_SIZE = SIZEOF(.bss.ap_high_bt_call_stack_ptos);

    .bss.ap_rec_write_file_stack_ptos RDATA_WRITE_FILE_ADDR	:
    {
        */obj/speech_player_record.o(.stack.ap_rec_write_file_stack_ptos)
        . = SRAM_SPEECH_PLAYER_MMM_WRITE_FILE_STACK_SIZE;
    }
    _REC_STK_SIZE = SIZEOF(.bss.ap_rec_write_file_stack_ptos);
}
