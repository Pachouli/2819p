#**************************************************************************
#																		  *
#	PROJECT		: MIPS port	for	UCOS-II									  *
#																		  *
#	MODULE		: MakeFile												  *
#																		  *
#	AUTHOR		: wuyueqian										          *
#																		  *
#	PROCESSOR	: MIPS 4KEc	(32	bit	RISC) -	Actions	board				  *
#																		  *
#	Tool-chain	:  Cygnus											      *
#																		  *
#	DESCRIPTION	:														  *
#	Makefile used for building application.								  *
#																		  *
#	The	default	target (all) builds	application	in two formats :		  *
#	*.elf :	Image in ELF format.										  *
#	*.rec :	Image in S-record format.									  *
#																		  *
#	The	linker also	generates a	MAP	file "*.map".						  *
#																		  *
#	Other targets are :													  *
#	clean :	   Deletes all files generated by makefile.					  *
#	depend :   Builds dependency file.									  *
#																		  *
#*************************************************************************/
# **********************************************
# Type of Processor	& Board
# **********************************************
Processor =	mips
# **********************************************
# Directories
# **********************************************
#把公共路径加载进来
include	./../../cfg/common_path
#把公共定义makefile加载进来
include	./../../cfg/rules.mk
# **********************************************
#Name of application 开发人员需修改处(modify-1)
IMAGENAME = acttest
#所要编译的源文件的存放位置,开发人员需修改处(modify-2)
SRC = $(CASE)/ap_test/ATT

SRCDIR_16 += $(SRC)/ $(SRC)/bank_resident $(SRC)/bank_common $(SRC)/bank_args_read
SRCDIR_16 += $(SRC)/bank_bt_attr_modify $(SRC)/bank_bt_attr_read $(SRC)/bank_bt_test 
SRCDIR_16 += $(SRC)/bank_fm $(SRC)/bank_gpio $(SRC)/bank_linein $(SRC)/bank_music 
SRCDIR_16 += $(SRC)/bank_channel

SRCDIR_32 =
#目标文件送往的文件夹路径,开发人员可能需修改处(modify-3)
OBJECT_BIN_PATH = $(CASE)/fwpkg/ap
# **********************************************

# include ../../../psp_rel/include/task_info.xn

#工具名称
DRV_BUILDER = $(PSP_REL)/tools/drv_builder.exe
AP_BUILDER = $(PSP_REL)/tools/ap_builder.exe

#存放结果文件的目录，这里的设置为当前目录，即生成的结果文件放在当前目录
LINKDIR	  =	.
#指定依赖过程的文件的搜索路径，把源文件的路径写上即可
VPATH	=	$(SRCDIR_16) $(SRCDIR_32) $(OBJ_DIR)

# **********************************************
# Image	file names and map file
# **********************************************
#指定结果文件的名称
IMAGE_ELF =	$(IMAGENAME).exe
IMAGE_LST =	$(IMAGENAME).lst
IMAGE_REC =	$(IMAGENAME).rec
IMAGE_BIN =	$(IMAGENAME).sys
IMAGE_INFO = $(IMAGENAME).info
MAP		  =	$(IMAGENAME).map
TARGET_AP = $(IMAGENAME).ap
TARGET_EXT   = exe lst map ap info
TARGET_FILES = $(foreach n,$(TARGET_EXT),$(IMAGENAME).$(n))
# **********************************************
# Compiler and linker options
# **********************************************

#指定程序中引用的头文件的搜索路径，一般源码include时只写上头文件的名称，没有路径信息。这时就根据这个选项去搜索该头文件
INCLUDE	  =	-I$(PSP_REL)/include/ucos -I$(PSP_REL)/include -I$(PSP_REL)/include/drv \
			-I$(CASE)/inc -I$(CASE)/inc/common -I$(CASE)/ap_test/inc -I./ -I./common

#指定链接时搜索的路径
LINCLUDE = -L$(OBJ_DIR) -L$(PSPLIBDIR) -L$(PSP_REL)/include

#指定自定义链接脚本的名称,开发人员需修改处(modify-4)
LD_SCRIPT = ap_test.xn

#链接命令行选项
LD_OPTS = $(LINCLUDE) -G 0 -T $(LD_SCRIPT) -o $(IMAGE_ELF) -Map $(MAP) $(OFORMAT)
LD_OPTS_1   = $(LINCLUDE) -G0 -T $(LD_SCRIPT) $(OFORMAT)
LD_OPTS_2   = -o $(IMAGE_ELF) -Map $(MAP)

#指定打包归档文件的路径
SARINCLUDE = $(OBJ_DIR)/*.o

# **********************************************
# Files	to be compiled
# **********************************************

#获得.c后缀源码
SRC_C_16  = $(foreach dir,	$(SRCDIR_16), $(wildcard $(dir)/*.c))
#转换为.o格式文件名称，不带路径信息
OBJ_C_16  = $(notdir $(patsubst %.c, %.o, $(SRC_C_16)))

#获得.c后缀源码
SRC_C_32  = $(foreach dir,	$(SRCDIR_32), $(wildcard $(dir)/*.c))
#转换为.o格式文件名称，不带路径信息
OBJ_C_32  = $(notdir $(patsubst %.c, %.o, $(SRC_C_32)))

#获得.S后缀源码
SRC_S_16  = $(foreach dir,	$(SRCDIR_16), $(wildcard $(dir)/*.S))
#转换为.o格式文件名称，不带路径信息
OBJ_S_16  = $(notdir $(patsubst %.S, %.o, $(SRC_S_16)))

#获得.c后缀源码
SRC_S_32  = $(foreach dir,	$(SRCDIR_32), $(wildcard $(dir)/*.S))
#转换为.o格式文件名称，不带路径信息
OBJ_S_32  = $(notdir $(patsubst %.S, %.o, $(SRC_S_32)))

#获得所有的.o文件名称
OBJ = $(OBJ_C_16) $(OBJ_S_16) $(OBJ_C_32) $(OBJ_S_32)


# **********************************************
# Rules
# **********************************************
#make目标
.PHONY : all

#dump出lst文件
all : creat_dir $(IMAGE_ELF)
	#$(OBJDUMP) -S $(IMAGE_ELF) > $(IMAGE_LST)
	$(READELF) -a $(IMAGE_ELF) > $(IMAGE_INFO)
	$(AP_BUILDER) $(IMAGE_ELF) $(TARGET_AP)
	cp $(TARGET_AP) $(OBJECT_BIN_PATH)
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_resident         bkresi.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_args_read        bkargs.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_common           bkcom.bin
	#基础测试项部分，此部分bin文件将合并到bkitem.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_bt_attr_modify   bank_bt_attr_modify.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_bt_attr_read     bank_bt_attr_read.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_bt_test          bank_bt_test.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_fm               bank_fm.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_linein           bank_linein.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_music            bank_music.bin
	#扩展测试项部分，此部分bin文件将合并到bkitex.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_gpio             bank_gpio.bin
	$(OBJCOPY) -O binary $(IMAGE_ELF) -j .bank_channel          bank_channel.bin

# 将test item bank合并到bkitem.bin中，不要修改合并顺序，否则要修改代码顺序id
	cat bank_bt_attr_modify.bin bank_bt_attr_read.bin bank_bt_test.bin bank_fm.bin bank_linein.bin bank_music.bin > bkitem.bin
	cat bank_gpio.bin bank_channel.bin > bkitex.bin
	./att_maker.exe actionstest_281b.atf 8 acttest.ap config.xml config.txt bkresi.bin bkargs.bin bkcom.bin bkitem.bin bkitex.bin

	mv *.bin ./bin

	date +%T

	cp actionstest_281b.atf ./../../fwpkg/


creat_dir:
	mkdir -p $(OBJ_DIR)
#链接过程
$(IMAGE_ELF) : $(OBJ) $(PSPLIBDIR)/ctor.o
	$(LD) $(SARINCLUDE) $(LD_OPTS_1) $(LD_OPTS_2)
#编译过程
$(OBJ_C_16) : %.o : %.c
	$(CC) $(CC_OPTS_Os) -o  $(OBJ_DIR)/$@ $<
	@echo

$(OBJ_S_16) : %.o : %.S
	$(CC) $(CC_OPTS_O2_A_16) -o $(OBJ_DIR)/$@ $<
	@echo

$(OBJ_C_32) : %.o : %.c
	$(CC) $(CC_OPTS_O2) -o	$(OBJ_DIR)/$@ $<
	@echo

$(OBJ_S_32) : %.o : %.S
	$(CC) $(CC_OPTS_O2_A) -o $(OBJ_DIR)/$@ $<
	@echo




#删除结果文件
.PHONY : clean

clean :
	rm -f $(LINKDIR)/$(OBJ)
	rm -f $(LINKDIR)/$(TARGET_FILES)
	rm -rf $(OBJ_DIR)
	rm -f *.atf
	rm -f *.bin
	rm -rf ./bin/*.bin

